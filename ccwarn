#!/bin/sh

# ccwarn - Check C or C++ code base against both GCC and Clang.
#
# Copyright (c) 2019-2022 Michelle Chen.  Licensed under MIT


program="$0";
version="0.4.0";
license="MIT";

unsupported_file_extension="unknown";
unsupported_file_type="empty";

version ()
{
    echo $version;
}

license ()
{
    echo $license;
}

#--------1---------2---------3---------4---------5---------6---------7---------8
#2345678901234567890123456789012345678901234567890123456789012345678901234567890
help_info ()
{
    printf "Usage: %s path/to/*c path/to/*.cpp\n" "$program";
    printf "       %s [command] ...\n" "$program";
    printf "       %s help [command]\n" "$program";
    printf "\n";
    printf "Commands:\n";
    printf "\tversion\t\tShow version info and exit\n";
    printf "\tlicense\t\tShow license info and exit\n";
    printf "\thelp\t\tShow help info and exit\n";
    printf "\n";
    printf "Environment variables:\n";
    printf "\tGCC\t\tSet GCC compiler\n";
    printf "\tGXX\t\tSet G++ compiler\n";
    printf "\tCLANG\t\tSet Clang compiler\n";
    printf "\tCLANGXX\t\tSet Clang++ compiler\n";
    printf "\tCSTD\t\tSet C standard, default to C11\n";
    printf "\tCXXSTD\t\tSet C++ standard, default to C++17\n";
    printf "\tCFLAGS\t\tCustom include paths and compiler flags for C\n";
    printf "\tCXXFLAGS\tCusteom include paths and compiler flags for C++\n";
}
#2345678901234567890123456789012345678901234567890123456789012345678901234567890
#--------1---------2---------3---------4---------5---------6---------7---------8

help_version ()
{
    echo "Usage: $program version";
    echo "";
    echo "Show version info and exit";
}

help_license ()
{
    echo "Usage: $program license";
    echo "";
    echo "Show license info and exit";
}

help_help ()
{
    echo "Usage: $program help [command]";
    echo "";
    echo "Show help info for [command] and exit";
}

# check_ext extension
check_ext ()
{
    local ext=$1;

    if [ -z "$ext" ];
    then
        echo "No valid file extension" >&2;
        exit 1;
    fi

    case "$ext" in
    *.cpp)
        echo ".cpp"
        ;;
    *.cxx)
        echo ".cxx"
        ;;
    *.cc)
        echo ".cc"
        ;;
    *.c)
        echo ".c"
        ;;
    *)
        echo "Unsupported file: $1" >&2;
        echo "$unsupported_file_extension";
    esac
}

# check_file_type extension
check_file_type ()
{
    local ext=$1;

    if [ -z "$ext" ];
    then
        echo "No valid file extension" >&2;
        exit 1;
    fi

    case "$ext" in
        .c)
            echo "c"
            ;;
        .cpp|.cxx|.cc)
            echo "c++"
            ;;
        *)
            echo "Unknown file extension: $FILE_EXT" >&2;
            echo $unsupported_file_type;
            ;;
    esac
}

# check_c_standard standard
check_c_standard ()
{
    local std=$1;

    if [ -z "$std" ];
    then
        echo "No valid C standard" >&2;
        exit 1;
    fi

    case "$std" in
        c89|c90)
            ;;
        c99|c9x)
            ;;
        c11|c1x)
            ;;
        c17|c18)
            ;;
        c2x)
            ;;
        *)
            echo "Unsupported C standard: $1" >&2;
            exit 1;
            ;;
    esac
}

# check_cpp_standard standard
check_cpp_standard ()
{
    local std=$1;

    if [ -z "$std" ];
    then
        echo "No valid C++ standard" >&2;
        exit 1;
    fi

    case "$std" in
        c++98|c++03)
            ;;
        c++11|c++0x)
            ;;
        c++14|c++1y)
            ;;
        c++17|c++1z)
            ;;
        c++2a)
            ;;
        *)
            echo "Unsupported C++ standard: $1" >&2;
            exit 1;
    esac
}

cmd=$1
if [ "$cmd" = "version" ];
then
    version;
    exit 0;
fi

if [ "$cmd" = "license" ];
then
    license;
    exit 0;
fi

if [ -z "$cmd" ];
then
    help_info;
    exit 0;
fi

if [ "$cmd" = "help" ];
then
    subcmd=$2

    if [ "$subcmd" = "version" ];
    then
        help_version;
    elif [ "$subcmd" = "license" ];
    then
        help_license;
    elif [ "$subcmd" = "help" ];
    then
        help_help;
    elif [ "$subcmd" = "" ];
    then
        help_info;
        exit 0;
    else
        echo "Unknown subcommand: $2" >&2;
        exit 1;
    fi

    exit 0;
fi

GCC=$GCC;
if [ -z "$GCC" ];
then
    GCC="gcc";
fi

GXX=$GXX;
if [ -z "$GXX" ];
then
    GXX="g++";
fi

CLANG=$CLANG;
if [ -z "$CLANG" ];
then
    CLANG="clang";
fi

CLANGXX=$CLANGXX;
if [ -z "$CLANGXX" ];
then
    CLANGXX="clang++";
fi

CSTD=$CSTD;
if [ "$CSTD" = "ansi" ];
then
    CSTD="c89";
fi

if [ -z "$CSTD" ];
then
    CSTD="c11";
fi

check_c_standard "$CSTD";

CXXSTD=$CXXSTD;
if [ -z "$CXXSTD" ];
then
    CXXSTD="c++17";
fi

check_cpp_standard $CXXSTD;

# Check whether GCC exists on the host.
if ! command -v $GCC 2>/dev/null 1>&2;
then
    echo "Please install gcc";
    exit 1;
fi

# Check whether `g++` exists on the host.
if ! command -v $GXX 2>/dev/null 1>&2;
then
    echo "Please install g++";
    exit 1;
fi

# Check whether Clang exists on the host.
if ! command -v $CLANG 2>/dev/null 1>&2;
then
    echo "Please install clang";
    exit 1;
fi

# Test the program with GCC.
echo "Test target source against GCC";
IS_WRONG=0;
for file in "$@";
do
    FILE_EXT=$(check_ext "$file");

    if [ "$FILE_EXT" = "$unsupported_file_extension" ];
    then
        echo "Unsupported file: ${file}" >&2;
        continue;
    fi

    filename=$(basename "$file");
    objname=$(mktemp -t ${filename%$FILE_EXT}).o;

    FILE_TYPE=$(check_file_type "$FILE_EXT");

    if [ "$FILE_TYPE" = "c" ];
    then
        $GCC -c -o $objname $file -Wall -Wextra -std=$CSTD $CFLAGS;
        if [ "$?" -ne 0 ]; then IS_WRONG=1; fi
    elif [ "$FILE_TYPE" = "c++" ];
    then
        $GXX -c -o $objname $file -Wall -Wextra -std=$CXXSTD $CXXFLAGS;
        if [ "$?" -ne 0 ]; then IS_WRONG=1; fi
    fi
done

if [ "$IS_WRONG" -ne 0 ];
then
    echo "Wrong program compiled by GCC";
    exit 1;
fi

# Test the program with Clang.
echo "Test target source against Clang";
for file in "$@";
do
    FILE_EXT=$(check_ext $file);

    FILE_EXT=$(check_ext "$file");

    if [ "$FILE_EXT" = "$unsupported_file_extension" ];
    then
        echo "Unsupported file: ${file}" >&2;
        continue;
    fi

    filename=$(basename "$file");
    objname=$(mktemp -t ${filename%$FILE_EXT}).o;

    FILE_TYPE=$(check_file_type $FILE_EXT);

    if [ "$FILE_TYPE" = "c" ];
    then
        $CLANG -c -o $objname $file -Wall -Wextra -std=$CSTD $CFLAGS;
        if [ "$?" -ne 0 ]; then IS_WRONG=1; fi
    elif [ "$FILE_TYPE" = "c++" ];
    then
        $CLANGXX -c -o $objname $file -Wall -Wextra -std=$CXXSTD $CXXFLAGS;
        if [ "$?" -ne 0 ]; then IS_WRONG=1; fi
    fi
done

if [ "$IS_WRONG" -ne 0 ];
then
    echo "Wrong program compiled by Clang";
    exit 1;
fi

exit 0;
